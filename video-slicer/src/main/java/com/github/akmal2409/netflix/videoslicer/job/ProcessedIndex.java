package com.github.akmal2409.netflix.videoslicer.job;

import java.util.Arrays;

/**
 * Wrapper class that contains all the information generated by this worker after processing
 * and segmenting the video. This infromation may be useful for the next stages of the pipeline.
 */
public record ProcessedIndex(
    String audioFileName,
    double frameRate,
    int totalFrames,
    int width,
    int height,
    int gopSize,
    int segmentDurationSeconds,
    ProcessedSegment[] segments
) {

  public static record ProcessedSegment(
      String fileName,
      int index,
      int startFrame,
      int endFrame
  ) {}


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    ProcessedIndex that = (ProcessedIndex) o;

    if (Double.compare(frameRate, that.frameRate) != 0) {
      return false;
    }
    if (totalFrames != that.totalFrames) {
      return false;
    }
    if (width != that.width) {
      return false;
    }
    if (height != that.height) {
      return false;
    }
    if (gopSize != that.gopSize) {
      return false;
    }
    if (segmentDurationSeconds != that.segmentDurationSeconds) {
      return false;
    }
    if (!audioFileName.equals(that.audioFileName)) {
      return false;
    }
    // Probably incorrect - comparing Object[] arrays with Arrays.equals
    return Arrays.equals(segments, that.segments);
  }

  @Override
  public int hashCode() {
    int result;
    long temp;
    result = audioFileName.hashCode();
    temp = Double.doubleToLongBits(frameRate);
    result = 31 * result + (int) (temp ^ (temp >>> 32));
    result = 31 * result + totalFrames;
    result = 31 * result + width;
    result = 31 * result + height;
    result = 31 * result + gopSize;
    result = 31 * result + segmentDurationSeconds;
    result = 31 * result + Arrays.hashCode(segments);
    return result;
  }

  @Override
  public String toString() {
    return "ProcessedIndex{" +
               "audioFileName='" + audioFileName + '\'' +
               ", frameRate=" + frameRate +
               ", totalFrames=" + totalFrames +
               ", width=" + width +
               ", height=" + height +
               ", gopSize=" + gopSize +
               ", segmentDurationSeconds=" + segmentDurationSeconds +
               ", segments=" + Arrays.toString(segments) +
               '}';
  }
}
